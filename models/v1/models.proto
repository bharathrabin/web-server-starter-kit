syntax = "proto3";

package api.v1;

option go_package = "github.com/yourusername/yourproject/gen/api/v1;apiv1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";

// Coffee Entry Messages
message CoffeeEntry {
  int64 id = 1;
  string bean_origin = 2;
  string roaster = 3;
  string roast_date = 4; // Format: YYYY-MM-DD
  string brew_method = 5;
  string grind_size = 6;
  double coffee_amount = 7;
  int32 water_temp = 8;
  string water_ratio = 9;
  int32 brew_time = 10;
  int32 rating = 11;
  string notes = 12;
  google.protobuf.Struct additional_data = 13;
  string photo_url = 14;
  google.protobuf.Timestamp created_at = 15;
  google.protobuf.Timestamp updated_at = 16;
}

message CreateCoffeeEntryRequest {
  string bean_origin = 1;
  string roaster = 2;
  string roast_date = 3;
  string brew_method = 4;
  string grind_size = 5;
  double coffee_amount = 6;
  int32 water_temp = 7;
  string water_ratio = 8;
  int32 brew_time = 9;
  int32 rating = 10;
  string notes = 11;
  google.protobuf.Struct additional_data = 12;
  string photo_url = 13;
}

message CreateCoffeeEntryResponse {
  CoffeeEntry coffee_entry = 1;
}

message GetCoffeeEntryRequest {
  int64 id = 1;
}

message GetCoffeeEntryResponse {
  CoffeeEntry coffee_entry = 1;
}

message UpdateCoffeeEntryRequest {
  int64 id = 1;
  string bean_origin = 2;
  string roaster = 3;
  string roast_date = 4;
  string brew_method = 5;
  string grind_size = 6;
  double coffee_amount = 7;
  int32 water_temp = 8;
  string water_ratio = 9;
  int32 brew_time = 10;
  int32 rating = 11;
  string notes = 12;
  google.protobuf.Struct additional_data = 13;
  string photo_url = 14;
}

message UpdateCoffeeEntryResponse {
  CoffeeEntry coffee_entry = 1;
}

message DeleteCoffeeEntryRequest {
  int64 id = 1;
}

message DeleteCoffeeEntryResponse {}

message ListCoffeeEntriesRequest {
  int32 page_size = 1;
  string page_token = 2;
  string brew_method = 3; // Optional filter
  int32 rating = 4; // Optional filter
}

message ListCoffeeEntriesResponse {
  repeated CoffeeEntry coffee_entries = 1;
  string next_page_token = 2;
}

service CoffeeService {
  rpc CreateCoffeeEntry(CreateCoffeeEntryRequest) returns (CreateCoffeeEntryResponse) {
    option (google.api.http) = {
      post: "/v1/coffee-entries"
      body: "*"
    };
  }

  rpc GetCoffeeEntry(GetCoffeeEntryRequest) returns (GetCoffeeEntryResponse) {
    option (google.api.http) = {
      get: "/v1/coffee-entries/{id}"
    };
  }

  rpc UpdateCoffeeEntry(UpdateCoffeeEntryRequest) returns (UpdateCoffeeEntryResponse) {
    option (google.api.http) = {
      put: "/v1/coffee-entries/{id}"
      body: "*"
    };
  }

  rpc DeleteCoffeeEntry(DeleteCoffeeEntryRequest) returns (DeleteCoffeeEntryResponse) {
    option (google.api.http) = {
      delete: "/v1/coffee-entries/{id}"
    };
  }

  rpc ListCoffeeEntries(ListCoffeeEntriesRequest) returns (ListCoffeeEntriesResponse) {
    option (google.api.http) = {
      get: "/v1/coffee-entries"
    };
  }
}


